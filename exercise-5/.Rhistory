df[,'b']
library(nycflights13)
library(dplyr)
library(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
nrow(nycflights13)
nrow("nycflights13")
??flights
nrow(flights)
ncol(flights)
View(flights)
colnames(flights)
mutate(flights, gain_in_air = arr_delay - dep_delay)
flights <-mutate(flights, gain_in_air = arr_delay - dep_delay)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
?arrange
flights <- arrange(flights, desc(gain_in_air)
flights <- arrange(flights, desc(gain_in_air))
flights <- arrange(flights, desc(gain_in_air))
View(flights)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(dplyr)
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(desc(gain_in_air))
hist(flights, gain_in_air)
?hist
hist(flights$gain_in_air)
mean(flights$gain_in_air, na.rm = TRUE)
flights_to_sea <- data.frame(select(flights, origin, destination, gain_in_air))
?select
flights_to_sea <- data.frame(select(flights, origin, dest, gain_in_air))
flights_to_sea
mean(flights_to_sea$gain_in_air, na.rm = TRUE)
flights_to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, gain_in_air)
mean(flights_to_sea$gain_in_air, na.rm = TRUE)
average <- flights_to_sea %>%
filter(origin == "JFK") %>%
select(airtime) %>%
mean()
average <- flights_to_sea %>%
filter(origin == "JFK") %>%
select(air_time) %>%
mean()
average <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
mean()
average <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
average
average <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time)
average
filter(dest == "SEA", origin == "JFK") %>%
summarise(
average = mean(air_time, na.rm = TRUE)
min = min(air_time, na.rm = TRUE)
max = max(air_time, na.rm = TRUE)
)
filter(flights, dest == "SEA", origin == "JFK") %>%
summarise(
average = mean(air_time, na.rm = TRUE)
min = min(air_time, na.rm = TRUE)
max = max(air_time, na.rm = TRUE)
)
filter(flights, dest == "SEA", origin == "JFK") %>%
summarise(
average = mean(air_time, na.rm = TRUE)
min = min(air_time, na.rm = TRUE)
max = max(air_time, na.rm = TRUE)
)
filter(flights, dest == "SEA", origin == "JFK") %>%
summarise(
average = mean(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE)
)
flights
select(fights, dest == "PVG")
select(flights, dest == "PVG")
select(flights, dest == "PVG")
to_pvg <- select(flights, dest == "PVG")
View(flights)
View(flights)
library(nycflights13)
flights
View(flights)
to_pvg <- select(flights, dest == "PVG")
flights %>%
filter(dest == "PVG")
to_pvg <- filter(flights, dest == "PVG")
View(to_pvg)
to_sea <- filter(flights, dest == "SEA")
to_sea
to_pvg
View(to_sea)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
View(flights)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(average = mean(dep_delay))
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(average = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
month_greatest_delay <- dep_delay_by_month %>%
filter(avg_delay = max(avg_delay)) %>%
select(month)
month_greatest_delay <- dep_delay_by_month %>%
filter(avg_delay == max(avg_delay)) %>%
select(month)
View(month_greatest_delay)
plot(month_greatest_delay)
plot(dep_delay_by_month)
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
head()
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(avg_arr_delay))
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(-avg_arr_delay))
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay)
flights %>%
flights %>%
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(avg_arr_delay))
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(avg_arr_delay)) %>%
head()
# Which city was flown to with the highest average speed?
flights %>%
mutate(speed = distance / air_time) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed)) %>%
select(dest)
# Which city was flown to with the highest average speed?
city <- flights %>%
mutate(speed = distance / air_time) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed)) %>%
select(dest)
city
city
View(city)
# Which city was flown to with the highest average speed?
city <- flights %>%
mutate(speed = distance / air_time) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city
# Which city was flown to with the highest average speed?
city <- flights %>%
mutate(speed = distance / air_time) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE)) %>%
select(dest)
city
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest)
largest_arrival_delay
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
install.packages('ggmap')
library(ggmap)
qmap('Seattle')
qmap("Shanghai")
qmap('Shangyu')
qmap('University of Washington')
qmap('University of Harvard')
library("httr")
query_params <- list(q = "d3", sort = "forts")
response <- GET("https://api.github.com", query = query_params)
print(response)
body <- content(response, "text")
body
install.packages("jsonlite")
library("jsonlite")
parsed_data <- fromJSON(body)
parsed_data
is.data.frame(parsed_data)
names(parsed_data)
parsed_data$hub_url
is.data.frame(parsed_data$hub_url)
parsed_data <- flatten(parsed_data)
make_hist(cars$speed)
knitr::opts_chunk$set(echo = TRUE)
source(analysis.R)
source("analysis.R"")
source("analysis.R")
source("analysis.R")
mean_speed <- round(mean(cars$speed), 2)
mean_speed
mean_speed <- round(mean(cars$speed), 1)
mean_speed
library(dplyr)
library(dplyr)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(mean(cars$speed), 1)
cars_styled <- cars %>% mutate(speed = paste0("**", speed, "**"),
dist = paste0("_", dist, "_"))
library(knitr)
library(dplyr)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(mean(cars$speed), 1)
cars_styled <- cars %>% mutate(speed = paste0("**", speed, "**"),
dist = paste0("_", dist, "_"))
library(dplyr)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(mean(cars$speed), 1)
cars_styled <- cars %>% mutate(Speed = paste0("**", speed, "**"),
Distance to Stop= paste0("_", dist, "_"))
library(dplyr)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(mean(cars$speed), 1)
cars_styled <- cars %>% mutate(Speed = paste0("**", speed, "**"),
Distance= paste0("_", dist, "_"))
library(dplyr)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(mean(cars$speed), 1)
cars_styled <- cars %>% mutate(Speed = paste0("**", speed, "**"),
Distance= paste0("_", dist, "_"))
library(dplyr)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(mean(cars$speed), 1)
cars_styled <- cars %>% mutate(speed = paste0("**", speed, "**"),
dist= paste0("_", dist, "_"))
library(dplyr)
make_hist <- function() {
hist(cars$speed)
}
mean_speed <- round(mean(cars$speed), 1)
cars_styled <- cars %>% mutate(speed = paste0("**", speed, "**"),
dist= paste0("_", dist, "_"))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
source("analysis.R")
make_hist()
?kable
install.packages("knitr")
shiny::runApp('git/ch16-shiny/exercise-3')
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
h1("page header"),
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
plotOutput("scatter")
))
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
h1("page header"),
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
plotOutput("scatter")
))
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
h1("page header"),
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
plotOutput("scatter")
))
# Create a shiny server that creates a scatterplot.
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_var]]
y <- mpg[[input$y_var]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
runApp('git/ch16-shiny/exercise-3')
runApp('git/ch16-shiny/exercise-5')
runApp('git/ch16-shiny/exercise-5')
# ui.R
library(shiny)
library(plotly)
shinyUI(navbarPage(
"Electoral College",
# Create a tab panel for your map
tabPanel(
"Map",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"mapvar",
label = "Variable to Map",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("map")
)
)
),
# Create a tabPanel to show your scatter plot
tabPanel(
"Scatter",
titlePanel("Population vs Vote Power"),
sidebarLayout(
sidePanel(
textInput("search", label = "Find a State", value = "")
),
mainPanel(
plotlyOutput("scatter")
)
)
)
))
# server.R
library(dplyr)
# ui.R
library(shiny)
library(plotly)
shinyUI(navbarPage(
"Electoral College",
# Create a tab panel for your map
tabPanel(
"Map",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"mapvar",
label = "Variable to Map",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("map")
)
)
),
# Create a tabPanel to show your scatter plot
tabPanel(
"Scatter",
titlePanel("Population vs Vote Power"),
sidebarLayout(
sidePanel(
textInput("search", label = "Find a State", value = "")
),
mainPanel(
plotlyOutput("scatter")
)
)
)
))
runApp('git/ch16-shiny/exercise-5')
runApp('git/ch16-shiny/exercise-5')
runApp('git/ch16-shiny/exercise-5')
